
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.awt.Toolkit;
import java.util.Vector;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dh2744
 */
public class IGM_MEA_main extends javax.swing.JFrame {

    //use in timer

    
    /**
     * Creates new form IGMTabbedDash
     */
    public IGM_MEA_main() {
        initComponents();
        ArrayList<String> RscriptString = new ArrayList<String>();
        //RscriptString=CheckSystemsPath.checkSystemsPath(outputTextArea);
        RscriptString=CheckSystemsPath.checkSystemsPath(null);
        System.out.println("RscriptString " + RscriptString );
        Vector<String> igmVersion = new Vector<String>();
        igmVersion=Get_IGM_MEA_Version.get_IGM_MEA_Version( null );
        System.out.println("igmVersion " + igmVersion.firstElement() );
        Vector<String> installResult = new Vector<String>();
        installResult = CheckInstallation.checkInstallation( );
        this.setTitle( "IGM MEA Analysis v0.3.4.2" );
        outputTextArea.append( igmVersion.firstElement());
        int totalsize=installResult.size();
        for (int index=0; index < totalsize; index++ ){
            outputTextArea.append( " ");
            outputTextArea.append( installResult.elementAt(index) );
        }
        
        loadSavedParameters();
                
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    

        
    
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        BurstPanel = new javax.swing.JTabbedPane();
        mainAllPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        spikeListChooseFileButton = new javax.swing.JButton();
        spikeListField = new javax.swing.JTextField();
        spikeListLabel = new javax.swing.JLabel();
        chooseExpLogFileButton = new javax.swing.JButton();
        expLogFileField = new javax.swing.JTextField();
        expLogLabel = new javax.swing.JLabel();
        basicPanel = new javax.swing.JPanel();
        spikesPanel = new javax.swing.JPanel();
        spikeCsvCheckBox = new javax.swing.JCheckBox();
        spikePlotCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        elecMinRateLabel = new javax.swing.JLabel();
        elecMinRateSpinner = new javax.swing.JSpinner();
        elecMaxRateLabel = new javax.swing.JLabel();
        elecMaxRateSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        wellMinRateSpinner = new javax.swing.JSpinner();
        wellFilterMaxDIVInactiveRatioJLabel = new javax.swing.JLabel();
        wellFilterMaxDIVInactiveRatioSpinner = new javax.swing.JSpinner();
        spikesResetButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        nPermSpinner = new javax.swing.JSpinner();
        nPermLabel = new javax.swing.JLabel();
        burstPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        burstCsvCheckBox = new javax.swing.JCheckBox();
        burstPlotCheckBox = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        begISISpinner = new javax.swing.JSpinner();
        endISILabel = new javax.swing.JLabel();
        endISISpinner = new javax.swing.JSpinner();
        begISILabel = new javax.swing.JLabel();
        minDurLabel = new javax.swing.JLabel();
        minSpkLabel = new javax.swing.JLabel();
        minDurSpinner = new javax.swing.JSpinner();
        minSpkSpinner = new javax.swing.JSpinner();
        minIBILabel = new javax.swing.JLabel();
        minIBISpinner = new javax.swing.JSpinner();
        jPanel22 = new javax.swing.JPanel();
        maxIntMethodRadioButton = new javax.swing.JRadioButton();
        poissonSurpriseRadioButton = new javax.swing.JRadioButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        surpriseLevelSpinner = new javax.swing.JSpinner();
        burstResetButton = new javax.swing.JButton();
        networkEventPanel = new javax.swing.JPanel();
        nsPanel = new javax.swing.JPanel();
        nsCsvCheckBox = new javax.swing.JCheckBox();
        nsPlotCheckBox = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        nsTLabel = new javax.swing.JLabel();
        nsTSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        nsNSpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        surSpinner = new javax.swing.JSpinner();
        jPanel13 = new javax.swing.JPanel();
        NSResetButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        networkBurstCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        minElectrodesNBLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        minElectrodesNBSpinner = new javax.swing.JSpinner();
        firstNBWindowSpinner = new javax.swing.JSpinner();
        secondNBWindowSpinner = new javax.swing.JSpinner();
        thirdNBWindowSpinner = new javax.swing.JSpinner();
        firstNBWindowLabel = new javax.swing.JLabel();
        secondNBWindowLabel = new javax.swing.JLabel();
        thirdNBWindowLabel = new javax.swing.JLabel();
        distributionAllPanel = new javax.swing.JPanel();
        distributionPanel = new javax.swing.JPanel();
        minCasesDistributionLabel = new javax.swing.JLabel();
        performDistributionLabel = new javax.swing.JLabel();
        xlimDistributionLabel = new javax.swing.JLabel();
        binInSegDistributionLabel = new javax.swing.JLabel();
        perWellDistributionLabel = new javax.swing.JLabel();
        minIBIJSpinner = new javax.swing.JSpinner();
        xlimIBISpinner = new javax.swing.JSpinner();
        binsInSegIBISpinner = new javax.swing.JSpinner();
        minISIJSpinner = new javax.swing.JSpinner();
        xlimISISpinner = new javax.swing.JSpinner();
        binsInSegISISpinner = new javax.swing.JSpinner();
        performIBICheckBox = new javax.swing.JCheckBox();
        performISICheckBox = new javax.swing.JCheckBox();
        performDurationCheckBox = new javax.swing.JCheckBox();
        minDurationJSpinner = new javax.swing.JSpinner();
        xlimDurationSpinner = new javax.swing.JSpinner();
        binsInSegDurationSpinner = new javax.swing.JSpinner();
        performNSpikesCheckBox = new javax.swing.JCheckBox();
        minNSpikesJSpinner = new javax.swing.JSpinner();
        xlimNSpikesSpinner = new javax.swing.JSpinner();
        binsInSegNSpikesSpinner = new javax.swing.JSpinner();
        performSpikeFreqCheckbox = new javax.swing.JCheckBox();
        minSpikeFreqJSpinner = new javax.swing.JSpinner();
        xlimSpikeFreqSpinner = new javax.swing.JSpinner();
        binsInSegSpikeFreqSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        IBIPerWellCheckBox = new javax.swing.JCheckBox();
        ISIPerWellCheckBox = new javax.swing.JCheckBox();
        durationPerWellCheckBox = new javax.swing.JCheckBox();
        nSpikesPerWellCheckBox = new javax.swing.JCheckBox();
        spikeFreqPerWellCheckBox = new javax.swing.JCheckBox();
        distributionResetButton = new javax.swing.JButton();
        toolsPanel = new javax.swing.JPanel();
        RasterPanel = new javax.swing.JPanel();
        rasterChooseFileButton = new javax.swing.JButton();
        showNSCheckBox = new javax.swing.JCheckBox();
        showBurstNumberCheckBox = new javax.swing.JCheckBox();
        showNSNumCheckBox = new javax.swing.JCheckBox();
        makeRasterButton = new javax.swing.JButton();
        showBurstsCheckBox = new javax.swing.JCheckBox();
        rasterEndTimeLabel = new javax.swing.JLabel();
        rasterEndTimeSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        rasterStartTimeSpinner = new javax.swing.JSpinner();
        wellRaster = new javax.swing.JLabel();
        rasterWellList = new javax.swing.JComboBox();
        rasterFileChooserField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        toolsTextArea = new javax.swing.JTextArea();
        showNBCheckBox = new javax.swing.JCheckBox();
        windowSizeComboBox = new javax.swing.JComboBox();
        windowSizeJLabel = new javax.swing.JLabel();
        distToolPanel = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        distPlotChooseFileButton = new javax.swing.JButton();
        distPlotFileField = new javax.swing.JTextField();
        distPlotFileLable = new javax.swing.JLabel();
        distPlotNPermSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        plotDistTreatmentOneLabel = new javax.swing.JLabel();
        plotDistTreatmentTwoLabel = new javax.swing.JLabel();
        plotDistTreatmentColumnLabel = new javax.swing.JLabel();
        plotDistColorColumnLabel = new javax.swing.JLabel();
        plotDistTreatmentOneSpinner = new javax.swing.JComboBox();
        plotDistTreatmentTwoSpinner = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        distPlotTextArea = new javax.swing.JTextArea();
        plotDistrButton = new javax.swing.JButton();
        plotDistColorOneComboBox = new javax.swing.JComboBox();
        plotDistColorTwoComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IGM MEA Analysis v1.3");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        BurstPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BurstPanelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                BurstPanelFocusLost(evt);
            }
        });

        mainAllPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mainAllPanelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mainAllPanelFocusLost(evt);
            }
        });

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        mainPanel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                mainPanelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        outputTextArea.setWrapStyleWord(true);
        outputTextArea.setFocusCycleRoot(true);
        outputTextArea.setFocusTraversalKeysEnabled(false);
        outputTextArea.setFocusable(false);
        outputTextArea.setVerifyInputWhenFocusTarget(false);
        outputTextArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                outputTextAreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        outputTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                outputTextAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                outputTextAreaFocusLost(evt);
            }
        });
        outputTextArea.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                outputTextAreaPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(outputTextArea);

        mainPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 18, 520, 190));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Main"));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        spikeListChooseFileButton.setText("Choose File");
        spikeListChooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spikeListChooseFileButtonActionPerformed(evt);
            }
        });

        spikeListField.setFocusTraversalKeysEnabled(false);
        spikeListField.setFocusable(false);
        spikeListField.setMaximumSize(new java.awt.Dimension(240, 80));
        spikeListField.setMinimumSize(new java.awt.Dimension(240, 80));

        spikeListLabel.setText("Spike List");

        chooseExpLogFileButton.setText("Choose File");
        chooseExpLogFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseExpLogFileButtonActionPerformed(evt);
            }
        });

        expLogFileField.setFocusCycleRoot(true);
        expLogFileField.setMaximumSize(new java.awt.Dimension(240, 80));
        expLogFileField.setMinimumSize(new java.awt.Dimension(240, 80));
        expLogFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expLogFileFieldActionPerformed(evt);
            }
        });

        expLogLabel.setText("Experiment Log");

        javax.swing.GroupLayout mainAllPanelLayout = new javax.swing.GroupLayout(mainAllPanel);
        mainAllPanel.setLayout(mainAllPanelLayout);
        mainAllPanelLayout.setHorizontalGroup(
            mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainAllPanelLayout.createSequentialGroup()
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainAllPanelLayout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(spikeListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainAllPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(expLogLabel)))
                .addGap(6, 6, 6)
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(expLogFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spikeListField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spikeListChooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseExpLogFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(mainAllPanelLayout.createSequentialGroup()
                .addGap(554, 554, 554)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainAllPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainAllPanelLayout.createSequentialGroup()
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        mainAllPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, chooseExpLogFileButton, runButton, spikeListChooseFileButton});

        mainAllPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {expLogFileField, spikeListField});

        mainAllPanelLayout.setVerticalGroup(
            mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainAllPanelLayout.createSequentialGroup()
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spikeListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spikeListField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spikeListChooseFileButton)))
                .addGap(6, 6, 6)
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainAllPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(expLogLabel))
                    .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(expLogFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseExpLogFileButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainAllPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainAllPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(mainAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runButton)
                            .addComponent(cancelButton))
                        .addContainerGap())))
        );

        BurstPanel.addTab("Data", mainAllPanel);

        spikesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        spikesPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        spikeCsvCheckBox.setSelected(true);
        spikeCsvCheckBox.setText("spikes csv");
        spikeCsvCheckBox.setToolTipText("Well and electrode level output of various spike intensity features");
        spikesPanel.add(spikeCsvCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 24, 102, -1));

        spikePlotCheckBox.setSelected(true);
        spikePlotCheckBox.setText("spikes plot");
        spikePlotCheckBox.setToolTipText("Plate, well and elctrode level graphical representation of spike intensity data");
        spikePlotCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spikePlotCheckBoxActionPerformed(evt);
            }
        });
        spikesPanel.add(spikePlotCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 53, -1, -1));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        elecMinRateLabel.setText("minimum electrode firing rate (spikes/s) ");
        elecMinRateLabel.setToolTipText("Minimum spiking frequency for a electrode to be included in analysis");

        elecMinRateSpinner.setModel(new javax.swing.SpinnerNumberModel(0.016d, 0.0d, 50.0d, 0.016d));

        elecMaxRateLabel.setText("maximum electrode firing rate (spikes/s)");
        elecMaxRateLabel.setToolTipText("Maximum spiking frequency above which an electrode is excluded from analysis");

        elecMaxRateSpinner.setModel(new javax.swing.SpinnerNumberModel(1000, 1, 1500, 1));

        jLabel14.setText("minimum # active electrodes per well ");
        jLabel14.setToolTipText("minumum number of electrodes firing at about .083Hz or 5 spike/min in a well below which that well is excluded from the analysis.");

        wellMinRateSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 0, 64, 1));

        wellFilterMaxDIVInactiveRatioJLabel.setText("well inactivity threshold as % DIVs");
        wellFilterMaxDIVInactiveRatioJLabel.setToolTipText("minumum number of electrodes firing at about .083Hz or 5 spike/min in a well below which that well is excluded from the analysis.");

        wellFilterMaxDIVInactiveRatioSpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.05d));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elecMinRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elecMaxRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wellFilterMaxDIVInactiveRatioJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elecMaxRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elecMinRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(wellFilterMaxDIVInactiveRatioSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(wellMinRateSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elecMinRateLabel)
                    .addComponent(elecMinRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elecMaxRateLabel)
                    .addComponent(elecMaxRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(wellMinRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellFilterMaxDIVInactiveRatioSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellFilterMaxDIVInactiveRatioJLabel))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        spikesResetButton.setText("Reset");
        spikesResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spikesResetButtonActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("feature statistics"));

        nPermSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 10, 10000, 10));

        nPermLabel.setText("# permutations");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nPermLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nPermSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nPermSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nPermLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout basicPanelLayout = new javax.swing.GroupLayout(basicPanel);
        basicPanel.setLayout(basicPanelLayout);
        basicPanelLayout.setHorizontalGroup(
            basicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(spikesResetButton))
                    .addGroup(basicPanelLayout.createSequentialGroup()
                        .addComponent(spikesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        basicPanelLayout.setVerticalGroup(
            basicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicPanelLayout.createSequentialGroup()
                .addGroup(basicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spikesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spikesResetButton)
                .addContainerGap())
        );

        BurstPanel.addTab("Filter", basicPanel);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        burstCsvCheckBox.setSelected(true);
        burstCsvCheckBox.setText("burst csv");
        burstCsvCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burstCsvCheckBoxActionPerformed(evt);
            }
        });

        burstPlotCheckBox.setSelected(true);
        burstPlotCheckBox.setText("burst plot");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(burstCsvCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(burstPlotCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(burstCsvCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(burstPlotCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Max-Int Method Parameters"));

        begISISpinner.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.001d, 1.0d, 0.005d));

        endISILabel.setText("end.isi");
        endISILabel.setToolTipText("inter spike interval above which burst will end");

        endISISpinner.setModel(new javax.swing.SpinnerNumberModel(0.25d, 0.001d, 1.0d, 0.001d));

        begISILabel.setText("beg.isi");
        begISILabel.setToolTipText("inter spike interval necessary to consider the start of a burst.");

        minDurLabel.setText("min.dur");
        minDurLabel.setToolTipText("minimum duration of burst for candidate burst to be labeled a burst");

        minSpkLabel.setText("min.spk");
        minSpkLabel.setToolTipText("minimum number of spikes for candidate burst to be considered a burst");

        minDurSpinner.setModel(new javax.swing.SpinnerNumberModel(0.05d, 0.001d, 5.0d, 0.001d));

        minSpkSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 2, 50, 1));

        minIBILabel.setText("min.ibi");
        minIBILabel.setToolTipText("minimum interval between bursts for 2 different bursts to be considered separate.");

        minIBISpinner.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.001d, 10.0d, 0.001d));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(endISILabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minIBILabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minSpkLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(minDurLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(begISILabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(begISISpinner)
                    .addComponent(endISISpinner)
                    .addComponent(minSpkSpinner)
                    .addComponent(minIBISpinner)
                    .addComponent(minDurSpinner))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {begISISpinner, endISISpinner, minIBISpinner, minSpkSpinner});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(begISISpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(begISILabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endISISpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endISILabel))
                .addGap(7, 7, 7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minIBILabel)
                    .addComponent(minIBISpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minDurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minDurSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minSpkLabel)
                    .addComponent(minSpkSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {begISILabel, endISILabel, minDurLabel, minIBILabel, minSpkLabel});

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Burst Detection Algorithm"));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(maxIntMethodRadioButton);
        maxIntMethodRadioButton.setSelected(true);
        maxIntMethodRadioButton.setText("max-interval method");
        jPanel22.add(maxIntMethodRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 24, 189, -1));

        buttonGroup1.add(poissonSurpriseRadioButton);
        poissonSurpriseRadioButton.setText("poisson surprise method");
        jPanel22.add(poissonSurpriseRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 53, -1, -1));

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Poisson Surprise Parameters"));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Surprise Level");
        jPanel21.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        surpriseLevelSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 100, 1));
        jPanel21.add(surpriseLevelSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 70, -1));

        burstResetButton.setText("Reset");
        burstResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burstResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout burstPanelLayout = new javax.swing.GroupLayout(burstPanel);
        burstPanel.setLayout(burstPanelLayout);
        burstPanelLayout.setHorizontalGroup(
            burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(burstPanelLayout.createSequentialGroup()
                .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, burstPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(burstResetButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, burstPanelLayout.createSequentialGroup()
                        .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        burstPanelLayout.setVerticalGroup(
            burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(burstPanelLayout.createSequentialGroup()
                .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(burstPanelLayout.createSequentialGroup()
                        .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(burstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(burstPanelLayout.createSequentialGroup()
                                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(burstResetButton)))
                .addContainerGap())
        );

        BurstPanel.addTab("Burst", burstPanel);

        nsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Network Spikes"));

        nsCsvCheckBox.setSelected(true);
        nsCsvCheckBox.setText("network spikes csv");

        nsPlotCheckBox.setSelected(true);
        nsPlotCheckBox.setText("network spikes plot");

        javax.swing.GroupLayout nsPanelLayout = new javax.swing.GroupLayout(nsPanel);
        nsPanel.setLayout(nsPanelLayout);
        nsPanelLayout.setHorizontalGroup(
            nsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nsPanelLayout.createSequentialGroup()
                .addGroup(nsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nsPlotCheckBox)
                    .addComponent(nsCsvCheckBox))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        nsPanelLayout.setVerticalGroup(
            nsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(nsCsvCheckBox)
                .addGap(6, 6, 6)
                .addComponent(nsPlotCheckBox))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters NS"));

        nsTLabel.setText("ns.T (s)");
        nsTLabel.setToolTipText("length in seconds of bin used to capture simultaneous spiking across electrodes");

        nsTSpinner.setModel(new javax.swing.SpinnerNumberModel(0.01d, 0.005d, 1.0d, 0.005d));

        jLabel12.setText("ns.N ");
        jLabel12.setToolTipText("minimum number of electrodes firing simultaneously in order to be called a network spike");

        nsNSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 2, 16, 1));

        jLabel13.setText("sur (ms)");
        jLabel13.setToolTipText("# ms to considered before and after network spike peak");

        surSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 20, 1000, 5));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(nsTLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nsTSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nsNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(surSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nsTLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nsTSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nsNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(surSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NSResetButton.setText("Reset");
        NSResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NSResetButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Bursts"));

        networkBurstCheckBox.setSelected(true);
        networkBurstCheckBox.setText("perform network bursts");
        networkBurstCheckBox.setToolTipText("controls output and calculation of network bursts");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(networkBurstCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(networkBurstCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters NB"));

        minElectrodesNBLabel.setText("min active electrodes");
        minElectrodesNBLabel.setToolTipText("Minimum number of active electrodes (electrodes recording activity about 5 spikes/minute) in order to calculate network bursts.");

        jLabel3.setText("smoothing window (ms)");

        minElectrodesNBSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 2, 64, 1));

        firstNBWindowSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 6, 10000, 2));

        secondNBWindowSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 6, 10000, 2));

        thirdNBWindowSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 6, 1000, 2));

        firstNBWindowLabel.setText("1.");

        secondNBWindowLabel.setText("2.");

        thirdNBWindowLabel.setText("3.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(minElectrodesNBLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondNBWindowLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(thirdNBWindowLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(firstNBWindowLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(secondNBWindowSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(firstNBWindowSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(minElectrodesNBSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(thirdNBWindowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minElectrodesNBLabel)
                    .addComponent(minElectrodesNBSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNBWindowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNBWindowLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(secondNBWindowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(secondNBWindowLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(thirdNBWindowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thirdNBWindowLabel))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout networkEventPanelLayout = new javax.swing.GroupLayout(networkEventPanel);
        networkEventPanel.setLayout(networkEventPanelLayout);
        networkEventPanelLayout.setHorizontalGroup(
            networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkEventPanelLayout.createSequentialGroup()
                .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(networkEventPanelLayout.createSequentialGroup()
                        .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, networkEventPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(NSResetButton)))
                .addGap(18, 18, 18)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        networkEventPanelLayout.setVerticalGroup(
            networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, networkEventPanelLayout.createSequentialGroup()
                .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(networkEventPanelLayout.createSequentialGroup()
                        .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(networkEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NSResetButton))
                    .addGroup(networkEventPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        BurstPanel.addTab("Network", networkEventPanel);

        distributionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        minCasesDistributionLabel.setText("min.cases");
        minCasesDistributionLabel.setToolTipText("Minimum # bursts for electrode to be included in distribution");

        performDistributionLabel.setText("perform");
        performDistributionLabel.setToolTipText("perform distribution analysis");

        xlimDistributionLabel.setText("x.lim");
        xlimDistributionLabel.setToolTipText("Upper limit to in number x-values beyond which data will not be included in distribution");

        binInSegDistributionLabel.setText("bins.in.seg");
        binInSegDistributionLabel.setToolTipText("# of values to be calculated in each segment of x.lim");

        perWellDistributionLabel.setText("per.well");
        perWellDistributionLabel.setToolTipText("perform analysis per well=1 or per electrode=0");

        minIBIJSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 1, 50, 1));

        xlimIBISpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, 100, 1));

        binsInSegIBISpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 100, 1));

        minISIJSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 1, 50, 1));

        xlimISISpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.25d, 5.0d, 0.25d));

        binsInSegISISpinner.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 1));

        performIBICheckBox.setSelected(true);
        performIBICheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performIBICheckBoxActionPerformed(evt);
            }
        });

        performISICheckBox.setSelected(true);

        performDurationCheckBox.setSelected(true);

        minDurationJSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 1, 50, 1));

        xlimDurationSpinner.setModel(new javax.swing.SpinnerNumberModel(18, 1, 25, 1));

        binsInSegDurationSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 100, 1));

        performNSpikesCheckBox.setSelected(true);

        minNSpikesJSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 50, 1));

        xlimNSpikesSpinner.setModel(new javax.swing.SpinnerNumberModel(200, 1, 5000, 1));

        binsInSegNSpikesSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 1000, 1));

        performSpikeFreqCheckbox.setSelected(true);
        performSpikeFreqCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performSpikeFreqCheckboxActionPerformed(evt);
            }
        });

        minSpikeFreqJSpinner.setModel(new javax.swing.SpinnerNumberModel(15, 1, 50, 1));

        xlimSpikeFreqSpinner.setModel(new javax.swing.SpinnerNumberModel(300, 1, 10000, 1));

        binsInSegSpikeFreqSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 1000, 1));

        jLabel6.setText("IBI");
        jLabel6.setToolTipText("Inter burst interval");

        jLabel7.setText("ISI");
        jLabel7.setToolTipText("Inter spike interval");

        jLabel8.setText("duration");
        jLabel8.setToolTipText("burst duration");

        jLabel9.setText("nSpikes");
        jLabel9.setToolTipText("number of spikes in burst");

        jLabel10.setText("spikeFreq");
        jLabel10.setToolTipText("spike frequency in burst (Hz)");

        IBIPerWellCheckBox.setText(" ");

        ISIPerWellCheckBox.setText(" ");

        durationPerWellCheckBox.setText(" ");

        nSpikesPerWellCheckBox.setText(" ");

        spikeFreqPerWellCheckBox.setText(" ");

        distributionResetButton.setText("Reset");
        distributionResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributionResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout distributionPanelLayout = new javax.swing.GroupLayout(distributionPanel);
        distributionPanel.setLayout(distributionPanelLayout);
        distributionPanelLayout.setHorizontalGroup(
            distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distributionPanelLayout.createSequentialGroup()
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minCasesDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xlimDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binInSegDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(performDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(binsInSegIBISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(performIBICheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minIBIJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xlimIBISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(distributionPanelLayout.createSequentialGroup()
                                .addComponent(minISIJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(minDurationJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(minNSpikesJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(minSpikeFreqJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(distributionPanelLayout.createSequentialGroup()
                                .addComponent(xlimISISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(xlimDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(xlimNSpikesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xlimSpikeFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(distributionPanelLayout.createSequentialGroup()
                                .addComponent(binsInSegISISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(binsInSegDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(binsInSegNSpikesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(binsInSegSpikeFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(distributionPanelLayout.createSequentialGroup()
                                .addComponent(performISICheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(performDurationCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(performNSpikesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(performSpikeFreqCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(444, 444, 444)
                        .addComponent(distributionResetButton))
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(perWellDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(IBIPerWellCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ISIPerWellCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(durationPerWellCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nSpikesPerWellCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(spikeFreqPerWellCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        distributionPanelLayout.setVerticalGroup(
            distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distributionPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(performSpikeFreqCheckbox)
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(performDistributionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(performIBICheckBox)
                            .addComponent(performISICheckBox)
                            .addComponent(performDurationCheckBox)
                            .addComponent(performNSpikesCheckBox))))
                .addGap(12, 12, 12)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(minCasesDistributionLabel))
                    .addComponent(minIBIJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minISIJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minDurationJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minNSpikesJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minSpikeFreqJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(xlimDistributionLabel))
                    .addComponent(xlimIBISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xlimISISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xlimDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(xlimNSpikesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(xlimSpikeFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(distributionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(binInSegDistributionLabel))
                    .addComponent(binsInSegIBISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binsInSegISISpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binsInSegDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(binsInSegNSpikesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(binsInSegSpikeFreqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(distributionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perWellDistributionLabel)
                    .addComponent(IBIPerWellCheckBox)
                    .addComponent(ISIPerWellCheckBox)
                    .addComponent(durationPerWellCheckBox)
                    .addComponent(nSpikesPerWellCheckBox)
                    .addComponent(spikeFreqPerWellCheckBox))
                .addGap(88, 88, 88)
                .addComponent(distributionResetButton))
        );

        distributionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel6, jLabel7, jLabel8, jLabel9});

        javax.swing.GroupLayout distributionAllPanelLayout = new javax.swing.GroupLayout(distributionAllPanel);
        distributionAllPanel.setLayout(distributionAllPanelLayout);
        distributionAllPanelLayout.setHorizontalGroup(
            distributionAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distributionAllPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(distributionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        distributionAllPanelLayout.setVerticalGroup(
            distributionAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distributionAllPanelLayout.createSequentialGroup()
                .addComponent(distributionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        BurstPanel.addTab("Distribution", distributionAllPanel);

        RasterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Raster Tool"));

        rasterChooseFileButton.setText("Choose R-Object");
        rasterChooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rasterChooseFileButtonActionPerformed(evt);
            }
        });

        showNSCheckBox.setText("show network spikes");

        showBurstNumberCheckBox.setText("show burst #");

        showNSNumCheckBox.setText("show # network spikes");

        makeRasterButton.setText("Make Raster Plot");
        makeRasterButton.setEnabled(false);
        makeRasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeRasterButtonActionPerformed(evt);
            }
        });

        showBurstsCheckBox.setText("show bursts");
        showBurstsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBurstsCheckBoxActionPerformed(evt);
            }
        });

        rasterEndTimeLabel.setText("end (s)");

        rasterEndTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.0d, 2000.0d, 1.0d));

        jLabel5.setText("start (s)");

        rasterStartTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 2000.0d, 1.0d));

        wellRaster.setText("Well");

        rasterWellList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", " " }));
        rasterWellList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rasterWellListActionPerformed(evt);
            }
        });

        toolsTextArea.setEditable(false);
        toolsTextArea.setColumns(20);
        toolsTextArea.setLineWrap(true);
        toolsTextArea.setRows(5);
        jScrollPane2.setViewportView(toolsTextArea);

        showNBCheckBox.setText("show network bursts");

        windowSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "20", "40", "50" }));

        windowSizeJLabel.setText("smoothing window ");

        javax.swing.GroupLayout RasterPanelLayout = new javax.swing.GroupLayout(RasterPanel);
        RasterPanel.setLayout(RasterPanelLayout);
        RasterPanelLayout.setHorizontalGroup(
            RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RasterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showNBCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(windowSizeJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windowSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(RasterPanelLayout.createSequentialGroup()
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RasterPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RasterPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(rasterFileChooserField, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rasterChooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RasterPanelLayout.createSequentialGroup()
                                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RasterPanelLayout.createSequentialGroup()
                                        .addComponent(wellRaster)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rasterWellList, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rasterStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rasterEndTimeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rasterEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RasterPanelLayout.createSequentialGroup()
                                        .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(showBurstsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(showNSCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(showNSNumCheckBox)
                                            .addComponent(showBurstNumberCheckBox))))
                                .addGap(131, 142, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RasterPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(makeRasterButton)))
                .addContainerGap())
        );
        RasterPanelLayout.setVerticalGroup(
            RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RasterPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rasterFileChooserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rasterChooseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellRaster)
                    .addComponent(rasterWellList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(rasterStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rasterEndTimeLabel)
                    .addComponent(rasterEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showBurstsCheckBox)
                    .addComponent(showBurstNumberCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showNSCheckBox)
                    .addComponent(showNSNumCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showNBCheckBox)
                    .addComponent(windowSizeJLabel)
                    .addComponent(windowSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(makeRasterButton))
        );

        javax.swing.GroupLayout toolsPanelLayout = new javax.swing.GroupLayout(toolsPanel);
        toolsPanel.setLayout(toolsPanelLayout);
        toolsPanelLayout.setHorizontalGroup(
            toolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RasterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        toolsPanelLayout.setVerticalGroup(
            toolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsPanelLayout.createSequentialGroup()
                .addComponent(RasterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        BurstPanel.addTab("Raster Plot", toolsPanel);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Distribution Tool"));

        distPlotChooseFileButton.setText("Choose File");
        distPlotChooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distPlotChooseFileButtonActionPerformed(evt);
            }
        });

        distPlotFileField.setFocusTraversalKeysEnabled(false);
        distPlotFileField.setFocusable(false);
        distPlotFileField.setMaximumSize(new java.awt.Dimension(240, 80));
        distPlotFileField.setMinimumSize(new java.awt.Dimension(240, 80));

        distPlotFileLable.setText("Distribution File");

        distPlotNPermSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 10, 10000, 10));

        jLabel1.setText("# permutations");

        plotDistTreatmentOneLabel.setText("# 1");

        plotDistTreatmentTwoLabel.setText("# 2");

        plotDistTreatmentColumnLabel.setText("Treatment ");

        plotDistColorColumnLabel.setText("Color");

        plotDistTreatmentOneSpinner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "treatment1", " " }));
        plotDistTreatmentOneSpinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotDistTreatmentOneSpinnerActionPerformed(evt);
            }
        });

        plotDistTreatmentTwoSpinner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "treatment2", " " }));
        plotDistTreatmentTwoSpinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotDistTreatmentTwoSpinnerActionPerformed(evt);
            }
        });

        distPlotTextArea.setEditable(false);
        distPlotTextArea.setColumns(20);
        distPlotTextArea.setLineWrap(true);
        distPlotTextArea.setRows(5);
        distPlotTextArea.setWrapStyleWord(true);
        distPlotTextArea.setFocusCycleRoot(true);
        distPlotTextArea.setFocusTraversalKeysEnabled(false);
        distPlotTextArea.setFocusable(false);
        distPlotTextArea.setVerifyInputWhenFocusTarget(false);
        distPlotTextArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                distPlotTextAreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        distPlotTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                distPlotTextAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                distPlotTextAreaFocusLost(evt);
            }
        });
        distPlotTextArea.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                distPlotTextAreaPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(distPlotTextArea);

        plotDistrButton.setText("Plot Distribution");
        plotDistrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotDistrButtonActionPerformed(evt);
            }
        });

        plotDistColorOneComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "red", "black", "blue", "grey", "green" }));

        plotDistColorTwoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "blue", "black", "red", "grey", "green" }));
        plotDistColorTwoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotDistColorTwoComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(plotDistTreatmentTwoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                            .addComponent(plotDistTreatmentOneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plotDistTreatmentColumnLabel)
                            .addComponent(plotDistTreatmentOneSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plotDistTreatmentTwoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(plotDistColorOneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(distPlotNPermSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(plotDistColorTwoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(plotDistColorColumnLabel)
                                .addGap(68, 68, 68)
                                .addComponent(jLabel1))))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(distPlotFileLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distPlotFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(plotDistrButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(distPlotChooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distPlotChooseFileButton)
                    .addComponent(distPlotFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distPlotFileLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plotDistTreatmentColumnLabel)
                    .addComponent(plotDistColorColumnLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plotDistTreatmentOneLabel)
                    .addComponent(plotDistTreatmentOneSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plotDistColorOneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distPlotNPermSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plotDistTreatmentTwoLabel)
                    .addComponent(plotDistTreatmentTwoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plotDistColorTwoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(plotDistrButton))
        );

        javax.swing.GroupLayout distToolPanelLayout = new javax.swing.GroupLayout(distToolPanel);
        distToolPanel.setLayout(distToolPanelLayout);
        distToolPanelLayout.setHorizontalGroup(
            distToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        distToolPanelLayout.setVerticalGroup(
            distToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, distToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        BurstPanel.addTab("Dist Plot", distToolPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BurstPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(BurstPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spikesResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spikesResetButtonActionPerformed
        // TODO add your handling code here:
        elecMaxRateSpinner.setValue(1000);
        wellMinRateSpinner.setValue(4);
        elecMinRateSpinner.setValue(0.016);
        wellFilterMaxDIVInactiveRatioSpinner.setValue(0.5);
        spikeCsvCheckBox.setSelected(0 < 1);
        spikePlotCheckBox.setSelected(0 < 1);
        nPermSpinner.setValue(100);

    }//GEN-LAST:event_spikesResetButtonActionPerformed

    private void distributionResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributionResetButtonActionPerformed
        // TODO add your handling code here:
        minIBIJSpinner.setValue(15);
        minISIJSpinner.setValue(15);
        minDurationJSpinner.setValue(15);
        minNSpikesJSpinner.setValue(5);
        minSpikeFreqJSpinner.setValue(15);

        xlimIBISpinner.setValue(20);
        xlimISISpinner.setValue(0.5);
        xlimDurationSpinner.setValue(18);
        xlimNSpikesSpinner.setValue(200);
        xlimSpikeFreqSpinner.setValue(300);

        binsInSegIBISpinner.setValue(5);
        binsInSegISISpinner.setValue(100);
        binsInSegDurationSpinner.setValue(5);
        binsInSegNSpikesSpinner.setValue(1);
        binsInSegSpikeFreqSpinner.setValue(1);

        
        IBIPerWellCheckBox.setSelected(0 > 1);
        ISIPerWellCheckBox.setSelected(0 > 1);
        durationPerWellCheckBox.setSelected(0 > 1);
        nSpikesPerWellCheckBox.setSelected(0 > 1);
        spikeFreqPerWellCheckBox.setSelected(0 > 1);

        performIBICheckBox.setSelected(0 < 1);
        performISICheckBox.setSelected(0 < 1);
        performDurationCheckBox.setSelected(0 < 1);
        performNSpikesCheckBox.setSelected(0 < 1);
        performSpikeFreqCheckbox.setSelected(0 < 1);


    }//GEN-LAST:event_distributionResetButtonActionPerformed

    private void performSpikeFreqCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performSpikeFreqCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_performSpikeFreqCheckboxActionPerformed

    private void performIBICheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performIBICheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_performIBICheckBoxActionPerformed

    private void burstResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burstResetButtonActionPerformed
        // TODO add your handling code here:
        begISISpinner.setValue(0.1);
        endISISpinner.setValue(0.25);
        minIBISpinner.setValue(0.8);
        minDurSpinner.setValue(0.05);
        minSpkSpinner.setValue(5);
        

        surpriseLevelSpinner.setValue(5);

        maxIntMethodRadioButton.setSelected(1 > 0);

        burstCsvCheckBox.setSelected(0 < 1);
        burstPlotCheckBox.setSelected(0 < 1);
    }//GEN-LAST:event_burstResetButtonActionPerformed

    private void NSResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NSResetButtonActionPerformed
        // TODO add your handling code here:
        nsTSpinner.setValue(0.01);
        nsNSpinner.setValue(3);
        surSpinner.setValue(100);

        nsCsvCheckBox.setSelected(0 < 1);
        nsPlotCheckBox.setSelected(0 < 1);
        
        minElectrodesNBSpinner.setValue(5);
        networkBurstCheckBox.setSelected(0<1);
        firstNBWindowSpinner.setValue(20);
        secondNBWindowSpinner.setValue(40);
        thirdNBWindowSpinner.setValue(100);

    }//GEN-LAST:event_NSResetButtonActionPerformed

    private void burstCsvCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burstCsvCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_burstCsvCheckBoxActionPerformed

    private void outputTextAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_outputTextAreaAncestorAdded
        // TODO add your handling code here:
        
       

    }//GEN-LAST:event_outputTextAreaAncestorAdded

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelActionPerformed

    
       
    
    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        
        // check systemPaths is available
        Integer error=0; //check csv path error
        //ArrayList<String> envVars = new ArrayList<>();
        Vector<String> envVars = new Vector<String>();
        File fileWD = new File(System.getProperty("java.class.path"));
        File dashDir = fileWD.getAbsoluteFile().getParentFile();

        System.out.println("Dash dir " + dashDir.toString());
        File systemPaths = new File( dashDir.toString() +File.separator+"Code" +
                File.separator+"systemPaths.txt");
        
        envVars=GetEnvVars.getEnvVars( systemPaths, outputTextArea  );
        System.out.println( "envVars "+ envVars.toString() );
        
        //check for error in envVars
        Boolean errorEnvVar=false;
        errorEnvVar=envVars.contains("error");
        System.out.println( "errorEnvVar "+ errorEnvVar.toString() );
        
        // check spike list and csv files
        if (! errorEnvVar){
        error = CheckSpkListExpLog.checkSpkListExpLog(spikeListField,
            expLogFileField,
            runButton,
            outputTextArea );
        System.out.println("error from check files is " + error);
        }
        
        if (error.equals(0) & !errorEnvVar ){
            
            
            String[] spkCsvFile=RemoveSqBrackets.removeSqBrackets( spikeListField );

            for (int r=0; r<spkCsvFile.length; r++){
                spkCsvFile[r] = spkCsvFile[r].replace("\\", "\\\\");
                System.out.println("spkCsvFile["+r+"] "+ spkCsvFile[r] );
            }

            // exp log
            //read in Experimental log
            String expLogFile = expLogFileField.getText();
            //needed for paths in PC
            expLogFile = expLogFile.replace("\\", "\\\\");
            System.out.println("expLogFile "+ expLogFile );
            // get data directory for log file
            File temp1 = new File( expLogFileField.getText());
            String temp2=temp1.getParent().toString();
            String analysisDir = temp2.concat( File.separator + File.separator + "Analysis" );
            System.out.println("analysisDir "+ analysisDir );
            String logFileParentString = analysisDir.concat( File.separator + File.separator + "LogFiles"+
                    File.separator + File.separator );
            System.out.println("logFileParentString "+ logFileParentString );
            
            //Set root directory
            File fileWD1 = new File(System.getProperty("java.class.path"));
            File rootPath1 = fileWD1.getAbsoluteFile().getParentFile();

            String rootPath2Slash = rootPath1.toString();
        
            //needed for paths in PC, won't replace in apple path
            rootPath2Slash = rootPath2Slash.replace("\\", "\\\\");
            System.out.println("rootPath2Slash "+ rootPath2Slash );
       
            //File fileTemp1 = new File( expLogFileField.getText() );
            //String rootPath = new File(fileTemp1.getParent()).getParent();
            //System.out.println( "rootPath2Slash :  " + rootPath2Slash );
            String rootPath = rootPath2Slash;

            System.out.println( "Before Save parameters.sav "  );
            
            
            SaveParameters.saveParameters( 
                    rootPath,
                    spikeCsvCheckBox,  
                    spikePlotCheckBox,
                    elecMinRateSpinner ,
                    elecMaxRateSpinner,
                    wellMinRateSpinner,
                    wellFilterMaxDIVInactiveRatioSpinner,
                    nPermSpinner,
                    burstCsvCheckBox,
                    burstPlotCheckBox,
                    poissonSurpriseRadioButton,
                    surpriseLevelSpinner,
                    maxIntMethodRadioButton,
                    begISISpinner,
                    minIBISpinner,
                    minDurSpinner,
                    endISISpinner,
                    minSpkSpinner,
                    nsCsvCheckBox,
                    nsPlotCheckBox,
                    nsTSpinner,
                    nsNSpinner,
                    surSpinner,
                    minIBIJSpinner,
                    minISIJSpinner ,
                    minDurationJSpinner,
                    minNSpikesJSpinner,
                    minSpikeFreqJSpinner,
                    xlimIBISpinner,
                    xlimISISpinner,
                    xlimDurationSpinner,
                    xlimNSpikesSpinner,
                    xlimSpikeFreqSpinner,
                    binsInSegIBISpinner,
                    binsInSegISISpinner,
                    binsInSegDurationSpinner,
                    binsInSegNSpikesSpinner,
                    binsInSegSpikeFreqSpinner,
                    IBIPerWellCheckBox,
                    ISIPerWellCheckBox,
                    durationPerWellCheckBox,
                    nSpikesPerWellCheckBox,
                    spikeFreqPerWellCheckBox,
                    performIBICheckBox,
                    performISICheckBox,
                    performDurationCheckBox,
                    performNSpikesCheckBox,
                    performSpikeFreqCheckbox,
                    networkBurstCheckBox,
                    minElectrodesNBSpinner,
                    firstNBWindowSpinner,
                    secondNBWindowSpinner,
                    thirdNBWindowSpinner );

            //need to take 1/2 the values
            System.out.println( "Before write parameters.R "  );
            
            
            
            WriteParameterR.writeParameterR(
                    rootPath,
                    spkCsvFile,
                    expLogFile,
                    spikeCsvCheckBox,  
                    spikePlotCheckBox,
                    elecMinRateSpinner ,
                    elecMaxRateSpinner,
                    wellMinRateSpinner,
                    wellFilterMaxDIVInactiveRatioSpinner,
                    nPermSpinner,
                    burstCsvCheckBox,
                    burstPlotCheckBox,
                    poissonSurpriseRadioButton,
                    surpriseLevelSpinner,
                    maxIntMethodRadioButton,
                    begISISpinner,
                    minIBISpinner,
                    minDurSpinner,
                    endISISpinner,
                    minSpkSpinner,
                    nsCsvCheckBox,
                    nsPlotCheckBox,
                    nsTSpinner,
                    nsNSpinner,
                    surSpinner,
                    minIBIJSpinner,
                    minISIJSpinner ,
                    minDurationJSpinner,
                    minNSpikesJSpinner,
                    minSpikeFreqJSpinner,
                    xlimIBISpinner,
                    xlimISISpinner,
                    xlimDurationSpinner,
                    xlimNSpikesSpinner,
                    xlimSpikeFreqSpinner,
                    binsInSegIBISpinner,
                    binsInSegISISpinner,
                    binsInSegDurationSpinner,
                    binsInSegNSpikesSpinner,
                    binsInSegSpikeFreqSpinner,
                    IBIPerWellCheckBox,
                    ISIPerWellCheckBox,
                    durationPerWellCheckBox,
                    nSpikesPerWellCheckBox,
                    spikeFreqPerWellCheckBox,
                    performIBICheckBox,
                    performISICheckBox,
                    performDurationCheckBox,
                    performNSpikesCheckBox,
                    performSpikeFreqCheckbox,
                    networkBurstCheckBox,
                    minElectrodesNBSpinner,
                    firstNBWindowSpinner,
                    secondNBWindowSpinner,
                    thirdNBWindowSpinner  );


        // system call
        
            try {


                // get log file name
                System.out.println( "root path:  " + rootPath );

                System.out.println(" right before SystemCall.systemCall(cmd0, outputTextArea)  " );
                jScrollPane1.setViewportView(outputTextArea);
                //Hi Diana, here is the code that you would like to call to replace your 'Process' call.
                
                String cmd0 = envVars.get(0).toString() + " " + rootPath + 
                    File.separator +"Code"+ File.separator + "IGM_main.R";
                
                
                
                System.out.println( "cmd0 " + cmd0 );
                SystemCall.systemCall(cmd0, outputTextArea);

                System.out.println("After SystemCall.systemCall(cmd0, outputTextArea)  " );

               
                System.out.println( "Just before write to log" );
                 
                int logError;
                logError=WriteToLog.writeToLog( logFileParentString,  outputTextArea);
                System.out.println( "logError: "+logError );

            } catch (Exception ex) {
                System.out.println("error in SystemCall.systemCall");
                Logger.getLogger(IGM_MEA_main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            runButton.setEnabled( true );
        }
    }//GEN-LAST:event_runActionPerformed

    private void spikeListChooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spikeListChooseFileButtonActionPerformed

        

        String check = expLogFileField.getText();
        File fileCheck = new File(check);

        System.out.println(check);
        if (fileCheck.exists()) {
            JFileChooser chooser = new JFileChooser();
            File workingDirectory = new File(check);
            chooser.setCurrentDirectory(workingDirectory);
            chooser.setMultiSelectionEnabled(true);
            chooser.showOpenDialog(null);
            File[] spkListFile = chooser.getSelectedFiles();

            spikeListField.setText(Arrays.toString(spkListFile));
            spikeListField.setColumns(25); 
        } else {

            JFileChooser chooser = new JFileChooser();
            File fileWD = new File(System.getProperty("java.class.path"));
            File workingDirectory = fileWD.getAbsoluteFile().getParentFile();
            chooser.setCurrentDirectory(workingDirectory);
            chooser.setMultiSelectionEnabled(true);
            chooser.showOpenDialog(null);
            File[] spkListFile = chooser.getSelectedFiles();
            String[] spkListFileName = new String[spkListFile.length];
            Arrays.fill(spkListFileName, "");
            for (int i = 0; spkListFile.length <= i; i++) {
                spkListFileName[i] = spkListFile[i].getAbsolutePath();
            }

            spikeListField.setText(Arrays.toString(spkListFile));
            spikeListField.setColumns(25); 
        }


    }//GEN-LAST:event_spikeListChooseFileButtonActionPerformed

    private void chooseExpLogFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseExpLogFileButtonActionPerformed


        String check = spikeListField.getText();
        String[] temp = check.split(",");
        File fileCheck = new File(" ");
        if (temp.length > 1) {
            System.out.println("exp log chooser: " + temp[0]);
            String temp2 = temp[0].substring(1, temp[0].length());
            System.out.println("temp2 : " + temp2);
            fileCheck = new File(temp2);

        } else if (temp.length == 1) {
            System.out.println("exp log chooser: " + temp[0]);
            int len = temp[0].length();
            len--;
            String temp2 = temp[0].substring(1, len);
            System.out.println("temp2 : " + temp2);
            fileCheck = new File(temp2);
        } else {

        }

        System.out.println("file exists" + fileCheck.exists());
        if (fileCheck.exists()) {
            JFileChooser chooser = new JFileChooser();
            File workingDirectory = new File(fileCheck.toString());

            chooser.setCurrentDirectory(workingDirectory);
            chooser.setDialogTitle("hello ");
            chooser.showOpenDialog(null);
            //chooser.showOpenDialog();
            File expLogFile = chooser.getSelectedFile();
            String expLogFileName = expLogFile.getAbsolutePath();

            expLogFileField.setText(expLogFileName);

        } else {

            JFileChooser chooser = new JFileChooser();
            File fileWD = new File(System.getProperty("java.class.path"));
            File workingDirectory = fileWD.getAbsoluteFile().getParentFile();
            chooser.setCurrentDirectory(workingDirectory);
            //chooser.setDialogTitle("hello ");
            chooser.showOpenDialog(null);
            File expLogFile = chooser.getSelectedFile();
            String expLogFileName = expLogFile.getAbsolutePath();
            expLogFileField.setText(expLogFileName);
        }

    }//GEN-LAST:event_chooseExpLogFileButtonActionPerformed

    
    public void loadSavedParameters(  ){
        
        
    // Wrap all in a try/catch block to trap I/O errors.
        try{
            //get directory where jar file is
            File f = new File(System.getProperty("java.class.path"));
            File dir = f.getAbsoluteFile().getParentFile();
            String path = dir.toString();
            System.out.println( path );
            
            String pathParam= path.concat(File.separator+"Parameters.sav");
            System.out.println( pathParam );
            // Open file to read from, named SavedObj.sav.
            FileInputStream saveFile = new FileInputStream( pathParam );

            // Create an ObjectInputStream to get objects from save file.
            ObjectInputStream save = new ObjectInputStream(saveFile);

            // Now we do the restore.
            //spikes output
            spikeCsvCheckBox.setSelected( (Boolean) save.readObject() );      
            spikePlotCheckBox.setSelected( (Boolean) save.readObject() );

            //spikes: parameter
            elecMinRateSpinner.setValue( (Double) save.readObject() );
            elecMaxRateSpinner.setValue( (Integer) save.readObject() );
            wellMinRateSpinner.setValue( (Integer) save.readObject() );
            wellFilterMaxDIVInactiveRatioSpinner.setValue( (Double) save.readObject() );
            nPermSpinner.setValue( (Integer) save.readObject() );

            // burst
            //output
            burstCsvCheckBox.setSelected( (Boolean) save.readObject() );
            burstPlotCheckBox.setSelected( (Boolean) save.readObject() );

            // algorithm
            poissonSurpriseRadioButton.setSelected( (Boolean) save.readObject() );
            surpriseLevelSpinner.setValue( (Integer) save.readObject() );
            maxIntMethodRadioButton.setSelected( (Boolean) save.readObject() );

            //MI params
            begISISpinner.setValue( (Double) save.readObject() );
            minIBISpinner.setValue( (Double) save.readObject() );
            minDurSpinner.setValue( (Double) save.readObject() );
            endISISpinner.setValue( (Double) save.readObject() );
            minSpkSpinner.setValue( (Integer) save.readObject() );
            //save.writeObject( minSpkSpinner.getValue());//Integer

            // NS
            //output
            nsCsvCheckBox.setSelected( (Boolean) save.readObject() );
            nsPlotCheckBox.setSelected( (Boolean) save.readObject() );

            //parameters
            nsTSpinner.setValue( (Double) save.readObject() );
            nsNSpinner.setValue( (Integer) save.readObject() );
            surSpinner.setValue( (Integer) save.readObject() );

            //distribution
            minIBIJSpinner.setValue( (Integer) save.readObject() );
            minISIJSpinner.setValue( (Integer) save.readObject() );
            minDurationJSpinner.setValue( (Integer) save.readObject() );
            minNSpikesJSpinner.setValue( (Integer) save.readObject() );
            minSpikeFreqJSpinner.setValue( (Integer) save.readObject() );

            xlimIBISpinner.setValue( (Integer) save.readObject() );
            xlimISISpinner.setValue( (Double) save.readObject() );
            xlimDurationSpinner.setValue( (Integer) save.readObject() );
            xlimNSpikesSpinner.setValue( (Integer) save.readObject() );
            xlimSpikeFreqSpinner.setValue( (Integer) save.readObject() );
            
            binsInSegIBISpinner.setValue( (Integer) save.readObject() );
            binsInSegISISpinner.setValue( (Integer) save.readObject() );
            binsInSegDurationSpinner.setValue( (Integer) save.readObject() );
            binsInSegNSpikesSpinner.setValue( (Integer) save.readObject() );
            binsInSegSpikeFreqSpinner.setValue( (Integer) save.readObject() );

            
            IBIPerWellCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( IBIPerWellCheckBox.isSelected());
            ISIPerWellCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( ISIPerWellCheckBox.isSelected());
            durationPerWellCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( durationPerWellCheckBox.isSelected());
            nSpikesPerWellCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( nSpikesPerWellCheckBox.isSelected());
            spikeFreqPerWellCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( spikeFreqPerWellCheckBox.isSelected());

            performIBICheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( performIBICheckBox.isSelected());
            performISICheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( performISICheckBox.isSelected());
            performDurationCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( performDurationCheckBox.isSelected());
            performNSpikesCheckBox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( performNSpikesCheckBox.isSelected());
            performSpikeFreqCheckbox.setSelected( (Boolean) save.readObject() );
            //save.writeObject( performSpikeFreqCheckbox.isSelected());
            

            //network events
            networkBurstCheckBox.setSelected( (Boolean) save.readObject() );
            minElectrodesNBSpinner.setValue( (Integer) save.readObject() );
            firstNBWindowSpinner.setValue((Integer) save.readObject() ) ;
            secondNBWindowSpinner.setValue((Integer) save.readObject() ) ;
            thirdNBWindowSpinner.setValue((Integer) save.readObject() ) ;


            // Close the file.
            save.close(); // This also closes saveFile.
        }
            catch(Exception exc){
            exc.printStackTrace(); // If there was an error, print the info.
        }

        // Print the values, to see that they've been recovered.
        System.out.println("\nRestored Object Values:\n");
        System.out.println("\tperformSpikeFreqCheckbox: " + performSpikeFreqCheckbox.isSelected());

        System.out.println();

        // All done.
        
        
        
    }//end of function
    
    
    private void spikePlotCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spikePlotCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spikePlotCheckBoxActionPerformed

    private void outputTextAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outputTextAreaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_outputTextAreaFocusLost

    private void outputTextAreaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_outputTextAreaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_outputTextAreaPropertyChange

    private void mainPanelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_mainPanelAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelAncestorAdded

    private void outputTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outputTextAreaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_outputTextAreaFocusGained

    private void BurstPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BurstPanelFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_BurstPanelFocusGained

    private void BurstPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BurstPanelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_BurstPanelFocusLost

    private void mainAllPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainAllPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_mainAllPanelFocusGained

    private void mainAllPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainAllPanelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_mainAllPanelFocusLost

    private void showBurstsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBurstsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showBurstsCheckBoxActionPerformed

    private void rasterChooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rasterChooseFileButtonActionPerformed

        makeRasterButton.setEnabled(true);
        String check = rasterFileChooserField.getText();
        File fileCheck = new File(check);

        System.out.println(check);
        if (fileCheck.exists()) {
            JFileChooser chooser = new JFileChooser();
            File workingDirectory = new File(check);
            chooser.setCurrentDirectory(workingDirectory);
            chooser.setMultiSelectionEnabled(false);
            chooser.showOpenDialog(null);
            File rasterRobject = chooser.getSelectedFile() ;

            rasterFileChooserField.setText( rasterRobject.toString() );

        } else {

            JFileChooser chooser = new JFileChooser();
            File fileWD = new File(System.getProperty("java.class.path"));
            File workingDirectory = fileWD.getAbsoluteFile().getParentFile();
            chooser.setCurrentDirectory(workingDirectory);
            chooser.setMultiSelectionEnabled(false);
            chooser.showOpenDialog(null);
            File rasterRobject = chooser.getSelectedFile() ;
            rasterFileChooserField.setText( rasterRobject.toString() );

        }
        
        int errorRobject=0;
        
        errorRobject = CheckField.checkRObject(
                rasterFileChooserField,
                makeRasterButton,
                toolsTextArea );
        System.out.println("error from check Robject is " + errorRobject);
        
        if (errorRobject==0){
            makeRasterButton.setEnabled(1>0);


            // parse toolTextArea
            String toParse=toolsTextArea.getText();

            // start time+++++++++++++++++++++++++++++
            if (toParse.contains("start time") ){
                String[] startTimeTemp =  toParse.split("start time=") ;
                String[] startTimeTemp2 =  startTimeTemp[1].split("end time=") ;
                System.out.println("startTimeTemp2[0] " + startTimeTemp2[0].toString() );
                Double robjectStart=new Double( startTimeTemp2[0].trim() );
                System.out.println("robjectStart "+robjectStart);
                rasterStartTimeSpinner.setValue( robjectStart );
            }



            // end time+++++++++++++++++++++++++++++
            if (toParse.contains("end time") ){
                String[] endTimeTemp =  toParse.split("end time=") ;
                String[] endTimeTemp2 =  endTimeTemp[1].split("DIV") ;
                System.out.println("endTimeTemp2[0] " + endTimeTemp2[0].toString() );
                Double robjectEnd=new Double( endTimeTemp2[0].trim() );
                System.out.println("robjectEnd "+robjectEnd);
                rasterEndTimeSpinner.setValue( robjectEnd );
            }


            // wells available+++++++++++++++++++++++++++++
            if (toParse.contains("wells available=") ){
                String[] availableWellsTemp =  toParse.split("wells available=") ;

                String[] tempAvail=availableWellsTemp[availableWellsTemp.length-1].split("\n");
                String[] availWells=new String[ ( availableWellsTemp.length-1) ];
                availableWellsTemp[availableWellsTemp.length-1]=tempAvail[0];
                System.out.println("tempAvail "+ tempAvail[0] );
                System.out.println("availableWellsTemp[1].toString() " + availableWellsTemp[1].toString() );

                for (int i=1; i<(availableWellsTemp.length); i++  ){
                    availWells[i-1] =availableWellsTemp[i];
                    System.out.println("availWells["+(i-1)+"]" + 
                            availWells[i-1].toString() );
                }

                rasterWellList.setModel(new javax.swing.DefaultComboBoxModel(availWells));
            }

            // window sizes+++++++++++++++++++++++++++++
            if (toParse.contains("window sizes=") ){
                String[] windowSizesTemp =  toParse.split("window sizes=") ;

                String[] tempWindow=windowSizesTemp[windowSizesTemp.length-1].split("\n");
                String[] windowSizes=new String[ ( windowSizesTemp.length-1) ];
                windowSizesTemp[windowSizesTemp.length-1]=tempWindow[0];
                System.out.println("tempWindow "+ tempWindow[0] );

                for (int i=1; i<(windowSizesTemp.length); i++  ){
                    windowSizes[i-1] =windowSizesTemp[i];
                    System.out.println("windowSizes["+(i-1)+"]" + 
                            windowSizes[i-1].toString() );
                }

                windowSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(windowSizes));
            }

            
            // nb.all+++++++++++++++++++++++++++++
            String[] nbWellsTemp =  toParse.split("nb_all=") ;
            String[] nbWells=nbWellsTemp[1].split("\n");
            System.out.println("nnbWells[0] " + nbWells[0]  );
            showNBCheckBox.setEnabled(1>0);
            windowSizeComboBox.setEnabled(1>0);
            windowSizeJLabel.setEnabled(1>0);
            if ( nbWells[0].equals("FALSE") ){
                showNBCheckBox.setEnabled(0>1);
                windowSizeComboBox.setEnabled(0>1);
                windowSizeJLabel.setEnabled(0>1);

            }
            
            
            // ns.all+++++++++++++++++++++++++++++
            String[] nsWellsTemp =  toParse.split("ns_all=") ;
            String[] nsWells=nsWellsTemp[1].split("\n");
            System.out.println("nsWells[0] " + nsWells[0]  );
            
            if ( nsWells[0].equals("FALSE") ){
                showNSCheckBox.setEnabled(0>1);
                showNSNumCheckBox.setEnabled(0>1);

            }
            
            
        }//end of if no error
        

    }//GEN-LAST:event_rasterChooseFileButtonActionPerformed

    private void makeRasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeRasterButtonActionPerformed
        
       
        
        
        if ( 1>0 ){
            
        Integer error1=0; //check Rscript path error
        //ArrayList<String> envVars = new ArrayList<>();
        Vector<String> envVars = new Vector<String>();
        File fileWD = new File(System.getProperty("java.class.path"));
        File rootPath = fileWD.getAbsoluteFile().getParentFile();
        String rootPath2Slash = rootPath.toString();
        
        //needed for paths in PC, won't replace in apple path
        rootPath2Slash = rootPath2Slash.replace("\\", "\\\\");
        System.out.println("rootPath2Slash "+ rootPath2Slash );
        
        // double file separator for PC
        File systemPaths = new File( rootPath2Slash + File.separator+ 
                File.separator+  "Code" + File.separator+ File.separator+ "systemPaths.txt");
        
        envVars=GetEnvVars.getEnvVars( systemPaths, toolsTextArea );
        System.out.println( "envVars "+ envVars.toString() );
        
        //check for error in envVars
        Boolean errorEnvVar=false;
        errorEnvVar=envVars.contains("error");
        System.out.println( "errorEnvVar "+ errorEnvVar.toString() );
        
        String rasterFile = rasterFileChooserField.getText();
        //needed for paths in PC, won't replace in apple path
        rasterFile = rasterFile.replace("\\", "\\\\");
        System.out.println("rasterFile "+ rasterFile );
        
        if (! errorEnvVar ){
            //+++++++++++++++++++++++++  save user selections
            try{  // Catch errors in I/O if necessary.
                // Open a file to write to, named SavedObj.sav.
                FileOutputStream saveFile=new FileOutputStream( 
                        rootPath2Slash + File.separator + File.separator +
                                "Code" + File.separator + File.separator +
                                "parametersRaster.sav"  );
                System.out.println( rootPath2Slash + 
                        File.separator + File.separator +"Code" +
                        File.separator + File.separator + "parametersRaster.sav"  );
                // Create an ObjectOutputStream to put objects into save file.
                ObjectOutputStream save = new ObjectOutputStream(saveFile);
                save.writeObject( rasterFile );
                save.writeObject( rasterWellList.getSelectedItem() );//string?
                save.writeObject( rasterStartTimeSpinner.getValue() );//integer
                save.writeObject( rasterEndTimeSpinner.getValue() );//integer
                save.writeObject( showBurstsCheckBox.isSelected());       //boolean
                save.writeObject( showBurstNumberCheckBox.isSelected());//boolean
                save.writeObject( showNSCheckBox.isSelected());//boolean
                save.writeObject( showNSNumCheckBox.isSelected());//boolean
                save.writeObject( showNBCheckBox.isSelected());//boolean
                // Close the file.
                save.close(); // This also closes saveFile.
            } catch(Exception exc){
                exc.printStackTrace(); // If there was an error, print the info.
            }
            // ++++++++++++++++++++++write user selections to R file
            try {
                FileWriter f = null;
                try {
                    System.out.println( rootPath2Slash + File.separator+ File.separator +
                            "Code" + File.separator + File.separator+ "parametersRaster.R" );
                    f = new FileWriter(rootPath2Slash + File.separator+ File.separator +
                            "Code" + File.separator + File.separator+ "parametersRaster.R");
                    
                } catch (IOException ex) {
                    System.out.println("error in opening parameter raster file");
                    Logger.getLogger(IGM_MEA_main.class.getName()).log(Level.SEVERE, null, ex);
                }
                DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
                Date dateobj = new Date();
                System.out.println(df.format(dateobj));
                // files
                f.write("# executed : " + df.format(dateobj) );
                f.write("\n");
                f.write("r_object_file<-'" + rasterFile + "' " );
                f.write("\n");
                
                String tempString=rasterWellList.getSelectedItem().toString();
                String[] tempWell= tempString.split("\n");
                f.write("well_for_raster<- '" + tempWell[0].trim()+"'" );
                f.write("\n");
                f.write("interval_for_raster<-c(" + rasterStartTimeSpinner.getValue() + "," +
                    rasterEndTimeSpinner.getValue() + ")");
                f.write("\n");
                Boolean showBurstsCheckBoxBool= showBurstsCheckBox.isSelected();
                String showBurstsCheckBoxChar = showBurstsCheckBoxBool.toString() ;
                f.write("show_bursts<- " + showBurstsCheckBoxChar.toUpperCase() );
                f.write("\n");
                Boolean showBurstNumberCheckBoxBool= showBurstNumberCheckBox.isSelected();
                String showBurstNumberCheckBoxChar = showBurstNumberCheckBoxBool.toString() ;
                f.write("show_burst_number<- " + showBurstNumberCheckBoxChar.toUpperCase() );
                f.write("\n");
                Boolean showNSCheckBoxBool= showNSCheckBox.isSelected();
                String showNSCheckBoxChar = showNSCheckBoxBool.toString() ;
                f.write("show_networkspikes<- " + showNSCheckBoxChar.toUpperCase() );
                f.write("\n");
                Boolean showNSNumCheckBoxBool= showNSNumCheckBox.isSelected();
                String showNSNumCheckBoxChar = showNSNumCheckBoxBool.toString() ;
                f.write("show_ns_number<- " + showNSNumCheckBoxChar.toUpperCase() );
                f.write("\n");
                
                Boolean showNBCheckBoxBool= showNBCheckBox.isSelected();
                String showNBCheckBoxChar = showNBCheckBoxBool.toString() ;
                
                f.write("show_nb<- " + showNBCheckBoxChar.toUpperCase() );
                f.write("\n");
                f.write("window_size<- " + windowSizeComboBox.getSelectedItem().toString() );
                f.write("\n");
                
                f.write("library(meaRtools)" );
                f.write("\n");
                f.write("generate_raster_plot(r_object_file= r_object_file," );
                f.write("\n");
                f.write("outputdir = NULL, ");
                f.write("well_for_raster= well_for_raster," );
                f.write("\n");
                f.write("interval_for_raster=interval_for_raster," );
                f.write("\n");
                f.write("show_bursts=show_bursts," );
                f.write("\n");
                f.write("show_burst_number=show_burst_number," );
                f.write("\n");
                f.write("show_nb=show_nb," );
                f.write("\n");
                f.write("show_networkspikes=show_networkspikes," );
                f.write("\n");
                f.write("show_ns_number =show_ns_number," );
                f.write("\n");
                f.write("window_size = window_size )" );
                f.write("\n");
                f.close();
                // get log file name
                System.out.println(" right before SystemCall.systemCall(cmd1, toolsTextArea)  " );
                    //Hi Diana, here is the code that you would like to call to replace your 'Process' call.
                String cmd1 = envVars.get(0).toString() + " " + rootPath2Slash + 
                        File.separator + File.separator + "Code"+ File.separator + 
                        File.separator +"parametersRaster.R";
                System.out.println( "cmd1 " + cmd1 );
                SystemCall.systemCall(cmd1, toolsTextArea);
                System.out.println(" after parametersRaster  " );
            } catch (Exception ex) {
                System.out.println("error in trying to run parametersRaster");
                Logger.getLogger(IGM_MEA_main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else{
            // if error returned by getEnvVars
            System.out.println(" issue with getting Rscript path in systemPaths.txt  " );
            toolsTextArea.setText("issue with getting Rscript path in systemPaths.txt  ");
        }
        
        }//END OF if 0>1
        

    }//GEN-LAST:event_makeRasterButtonActionPerformed

    private void expLogFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expLogFileFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expLogFileFieldActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void plotDistrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotDistrButtonActionPerformed
         
        Integer errorTreatments=0; //check Rscript path error
        //check that treatments 1 and treatment 2 equal
        if ( plotDistTreatmentOneSpinner.getSelectedItem().toString().equals( 
                plotDistTreatmentTwoSpinner.getSelectedItem().toString()) ) {
                System.out.println("Treatment #1="+
                        plotDistTreatmentOneSpinner.getSelectedItem().toString()+
                        "treatment #2= "+plotDistTreatmentTwoSpinner.getSelectedItem().toString());
                ErrorHandler.errorPanel("Treatment #1 = treatment #2 " + '\n'
                        + "Treatments must be different. ");
                errorTreatments = -1;
                
                return;
          } 
        
        
        
        
        
        
        Vector<String> envVars = new Vector<String>();
        File fileWD = new File(System.getProperty("java.class.path"));
        File rootPath = fileWD.getAbsoluteFile().getParentFile();
        String rootPath2Slash = rootPath.toString();
        
        //needed for paths in PC, won't replace in apple path
        rootPath2Slash = rootPath2Slash.replace("\\", "\\\\");
        System.out.println("rootPath2Slash "+ rootPath2Slash );
        
        // double file separator for PC
        File systemPaths = new File( rootPath2Slash + File.separator+ 
                File.separator+  "Code" + File.separator+ File.separator+ "systemPaths.txt");
        System.out.println("systemPaths "+ systemPaths.toString() );
        envVars=GetEnvVars.getEnvVars(systemPaths);
        System.out.println("envVars "+ envVars.get(0).toString() );
        
        Boolean errorEnvVar=!systemPaths.exists();
        String[] distPlotFile1=RemoveSqBrackets.removeSqBrackets( distPlotFileField );
        
        if (! (errorEnvVar || errorTreatments==-1)  ){
            
            // ++++++++++++++++++++++write user selections to R file
            try {
                
                System.out.println(" right before SystemCall.systemCall(cmd1 )  " );
                String Path=envVars.get(0).toString() + " " + rootPath2Slash + 
                        File.separator + File.separator + "Code";
                String cmd1 =  Path +File.separator + 
                        File.separator +"distribution_Permutations2.R" +
                        " distFiles="+ distPlotFile1[0].toString().trim() +
                        " type="+ plotDistTreatmentOneSpinner.getSelectedItem().toString().trim() +
                        " kotype=" + plotDistTreatmentTwoSpinner.getSelectedItem().toString().trim() + 
                        " typecol=" + plotDistColorOneComboBox.getSelectedItem().toString().trim() + 
                        " kotypecol="+ plotDistColorTwoComboBox.getSelectedItem().toString().trim() +
                        " np=" + distPlotNPermSpinner.getValue();
                System.out.println( "cmd1 " + cmd1 );
                SystemCall.systemCall(cmd1, distPlotTextArea );
                System.out.println(" after distributions   " );
            } catch (Exception ex) {
                System.out.println("error in trying to run parametersRaster");
                Logger.getLogger(IGM_MEA_main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else{
            // if error returned by getEnvVars
            System.out.println(" issue with getting Rscript path in systemPaths.txt  " );
            toolsTextArea.setText("issue with getting Rscript path in systemPaths.txt  ");
        }
    }//GEN-LAST:event_plotDistrButtonActionPerformed

    private void rasterWellListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rasterWellListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rasterWellListActionPerformed

    private void distPlotChooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distPlotChooseFileButtonActionPerformed
            
            JFileChooser chooser = new JFileChooser();
            File fileWD = new File(System.getProperty("java.class.path"));
            File workingDirectory = fileWD.getAbsoluteFile().getParentFile();
            chooser.setCurrentDirectory(workingDirectory);
            chooser.setMultiSelectionEnabled(true);
            chooser.showOpenDialog(null);
            File[] distFile = chooser.getSelectedFiles();
            String[] distFileName = new String[distFile.length];
            Arrays.fill(distFileName, "");
            for (int i = 0; distFile.length <= i; i++) {
                distFileName[i] = distFile[i].getAbsolutePath();
            }

            distPlotFileField.setText(Arrays.toString(distFile));
            distPlotFileField.setColumns(25); 
            
            // check for file errors
            int errorDistFile=CheckField.checkDistFile(
                    distPlotFileField,
                    plotDistrButton,
                    distPlotTextArea);
            
            if ( (errorDistFile>-1) ){
            plotDistrButton.setEnabled(1>0);


            // parse toolTextArea
            String toParse=distPlotTextArea.getText();

            // start time+++++++++++++++++++++++++++++
            if (toParse.contains("treatments=") ){
                String[] plotDistTreatmentsTemp =  toParse.split("treatments=") ;

                String[] tempTrt=plotDistTreatmentsTemp[plotDistTreatmentsTemp.length-1].split("\n");
                String[] plotDistTreatments=new String[ ( plotDistTreatmentsTemp.length-1) ];
                plotDistTreatmentsTemp[plotDistTreatmentsTemp.length-1]=tempTrt[0];
                System.out.println("tempTrt "+ tempTrt[0] );

                String[] plotDistTreatments2=new String[plotDistTreatments.length];
                for (int i=1; i<(plotDistTreatmentsTemp.length); i++  ){
                    plotDistTreatments[i-1] =  plotDistTreatmentsTemp[i];
                    plotDistTreatments2[i-1] = plotDistTreatmentsTemp[i];
                    System.out.println("plotDistTreatments["+(i-1)+"]" + 
                            plotDistTreatments[i-1].toString() );
                }
                //make a second string to initialize second treatment
                
                if (plotDistTreatments.length>1){
                    plotDistTreatments2[0]=plotDistTreatments[1];
                    plotDistTreatments2[1]=plotDistTreatments[0];
                }
                // check that there are at least 2 different 
                    if (plotDistTreatments.length<=1){

                        System.out.println("plotDistTreatments.length<=1 ");
                        ErrorHandler.errorPanel("File has only 1 treatment " + '\n'
                                + plotDistTreatments[0] + '\n'
                                + " Minimum 2 Treatments are needed");
                        plotDistrButton.setEnabled(false);
                        plotDistTreatmentOneSpinner.setModel(new javax.swing.DefaultComboBoxModel(plotDistTreatments));
                        plotDistTreatmentTwoSpinner.setModel(new javax.swing.DefaultComboBoxModel(plotDistTreatments2));

                    } else{
                        plotDistTreatmentOneSpinner.setModel(new javax.swing.DefaultComboBoxModel(plotDistTreatments));
                        plotDistTreatmentTwoSpinner.setModel(new javax.swing.DefaultComboBoxModel(plotDistTreatments2));
                    }
                
                }



            
            
            
        }//end of if no error
        
            
            
            
    }//GEN-LAST:event_distPlotChooseFileButtonActionPerformed

    private void plotDistTreatmentOneSpinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotDistTreatmentOneSpinnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plotDistTreatmentOneSpinnerActionPerformed

    private void plotDistTreatmentTwoSpinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotDistTreatmentTwoSpinnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plotDistTreatmentTwoSpinnerActionPerformed

    private void distPlotTextAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_distPlotTextAreaAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_distPlotTextAreaAncestorAdded

    private void distPlotTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_distPlotTextAreaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_distPlotTextAreaFocusGained

    private void distPlotTextAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_distPlotTextAreaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_distPlotTextAreaFocusLost

    private void distPlotTextAreaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_distPlotTextAreaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_distPlotTextAreaPropertyChange

    private void plotDistColorTwoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotDistColorTwoComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plotDistColorTwoComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    //static javax.swing.JTextArea outputTextArea;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IGM_MEA_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IGM_MEA_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IGM_MEA_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IGM_MEA_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        
        
        ArrayList<String> RscriptString = new ArrayList<String>();
        //RscriptString=CheckSystemsPath.checkSystemsPath(outputTextArea);
        RscriptString=CheckSystemsPath.checkSystemsPath(null);
        System.out.println("RscriptString " + RscriptString );
        
        int rasterToolClicked = 0; // count raster Tool clicks
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
               
                new IGM_MEA_main().setVisible(true);
                
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BurstPanel;
    private javax.swing.JCheckBox IBIPerWellCheckBox;
    private javax.swing.JCheckBox ISIPerWellCheckBox;
    private javax.swing.JButton NSResetButton;
    private javax.swing.JPanel RasterPanel;
    private javax.swing.JPanel basicPanel;
    private javax.swing.JLabel begISILabel;
    private javax.swing.JSpinner begISISpinner;
    private javax.swing.JLabel binInSegDistributionLabel;
    private javax.swing.JSpinner binsInSegDurationSpinner;
    private javax.swing.JSpinner binsInSegIBISpinner;
    private javax.swing.JSpinner binsInSegISISpinner;
    private javax.swing.JSpinner binsInSegNSpikesSpinner;
    private javax.swing.JSpinner binsInSegSpikeFreqSpinner;
    private javax.swing.JCheckBox burstCsvCheckBox;
    private javax.swing.JPanel burstPanel;
    private javax.swing.JCheckBox burstPlotCheckBox;
    private javax.swing.JButton burstResetButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton chooseExpLogFileButton;
    private javax.swing.JButton distPlotChooseFileButton;
    private javax.swing.JTextField distPlotFileField;
    private javax.swing.JLabel distPlotFileLable;
    private javax.swing.JSpinner distPlotNPermSpinner;
    private javax.swing.JTextArea distPlotTextArea;
    private javax.swing.JPanel distToolPanel;
    private javax.swing.JPanel distributionAllPanel;
    private javax.swing.JPanel distributionPanel;
    private javax.swing.JButton distributionResetButton;
    private javax.swing.JCheckBox durationPerWellCheckBox;
    private javax.swing.JLabel elecMaxRateLabel;
    private javax.swing.JSpinner elecMaxRateSpinner;
    private javax.swing.JLabel elecMinRateLabel;
    private javax.swing.JSpinner elecMinRateSpinner;
    private javax.swing.JLabel endISILabel;
    private javax.swing.JSpinner endISISpinner;
    private javax.swing.JTextField expLogFileField;
    private javax.swing.JLabel expLogLabel;
    private javax.swing.JLabel firstNBWindowLabel;
    private javax.swing.JSpinner firstNBWindowSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainAllPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton makeRasterButton;
    private javax.swing.JRadioButton maxIntMethodRadioButton;
    private javax.swing.JLabel minCasesDistributionLabel;
    private javax.swing.JLabel minDurLabel;
    private javax.swing.JSpinner minDurSpinner;
    private javax.swing.JSpinner minDurationJSpinner;
    private javax.swing.JLabel minElectrodesNBLabel;
    private javax.swing.JSpinner minElectrodesNBSpinner;
    private javax.swing.JSpinner minIBIJSpinner;
    private javax.swing.JLabel minIBILabel;
    private javax.swing.JSpinner minIBISpinner;
    private javax.swing.JSpinner minISIJSpinner;
    private javax.swing.JSpinner minNSpikesJSpinner;
    private javax.swing.JSpinner minSpikeFreqJSpinner;
    private javax.swing.JLabel minSpkLabel;
    private javax.swing.JSpinner minSpkSpinner;
    private javax.swing.JLabel nPermLabel;
    private javax.swing.JSpinner nPermSpinner;
    private javax.swing.JCheckBox nSpikesPerWellCheckBox;
    private javax.swing.JCheckBox networkBurstCheckBox;
    private javax.swing.JPanel networkEventPanel;
    private javax.swing.JCheckBox nsCsvCheckBox;
    private javax.swing.JSpinner nsNSpinner;
    private javax.swing.JPanel nsPanel;
    private javax.swing.JCheckBox nsPlotCheckBox;
    private javax.swing.JLabel nsTLabel;
    private javax.swing.JSpinner nsTSpinner;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel perWellDistributionLabel;
    private javax.swing.JLabel performDistributionLabel;
    private javax.swing.JCheckBox performDurationCheckBox;
    private javax.swing.JCheckBox performIBICheckBox;
    private javax.swing.JCheckBox performISICheckBox;
    private javax.swing.JCheckBox performNSpikesCheckBox;
    private javax.swing.JCheckBox performSpikeFreqCheckbox;
    private javax.swing.JLabel plotDistColorColumnLabel;
    private javax.swing.JComboBox plotDistColorOneComboBox;
    private javax.swing.JComboBox plotDistColorTwoComboBox;
    private javax.swing.JLabel plotDistTreatmentColumnLabel;
    private javax.swing.JLabel plotDistTreatmentOneLabel;
    private javax.swing.JComboBox plotDistTreatmentOneSpinner;
    private javax.swing.JLabel plotDistTreatmentTwoLabel;
    private javax.swing.JComboBox plotDistTreatmentTwoSpinner;
    private javax.swing.JButton plotDistrButton;
    private javax.swing.JRadioButton poissonSurpriseRadioButton;
    private javax.swing.JButton rasterChooseFileButton;
    private javax.swing.JLabel rasterEndTimeLabel;
    private javax.swing.JSpinner rasterEndTimeSpinner;
    private javax.swing.JTextField rasterFileChooserField;
    private javax.swing.JSpinner rasterStartTimeSpinner;
    private javax.swing.JComboBox rasterWellList;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel secondNBWindowLabel;
    private javax.swing.JSpinner secondNBWindowSpinner;
    private javax.swing.JCheckBox showBurstNumberCheckBox;
    private javax.swing.JCheckBox showBurstsCheckBox;
    private javax.swing.JCheckBox showNBCheckBox;
    private javax.swing.JCheckBox showNSCheckBox;
    private javax.swing.JCheckBox showNSNumCheckBox;
    private javax.swing.JCheckBox spikeCsvCheckBox;
    private javax.swing.JCheckBox spikeFreqPerWellCheckBox;
    private javax.swing.JButton spikeListChooseFileButton;
    private javax.swing.JTextField spikeListField;
    private javax.swing.JLabel spikeListLabel;
    private javax.swing.JCheckBox spikePlotCheckBox;
    private javax.swing.JPanel spikesPanel;
    private javax.swing.JButton spikesResetButton;
    private javax.swing.JSpinner surSpinner;
    private javax.swing.JSpinner surpriseLevelSpinner;
    private javax.swing.JLabel thirdNBWindowLabel;
    private javax.swing.JSpinner thirdNBWindowSpinner;
    private javax.swing.JPanel toolsPanel;
    private javax.swing.JTextArea toolsTextArea;
    private javax.swing.JLabel wellFilterMaxDIVInactiveRatioJLabel;
    private javax.swing.JSpinner wellFilterMaxDIVInactiveRatioSpinner;
    private javax.swing.JSpinner wellMinRateSpinner;
    private javax.swing.JLabel wellRaster;
    private javax.swing.JComboBox windowSizeComboBox;
    private javax.swing.JLabel windowSizeJLabel;
    private javax.swing.JLabel xlimDistributionLabel;
    private javax.swing.JSpinner xlimDurationSpinner;
    private javax.swing.JSpinner xlimIBISpinner;
    private javax.swing.JSpinner xlimISISpinner;
    private javax.swing.JSpinner xlimNSpikesSpinner;
    private javax.swing.JSpinner xlimSpikeFreqSpinner;
    // End of variables declaration//GEN-END:variables
}
